Aggregate.c:          Total->Veg.Tile[SouthFacing].Qsw        += VegMap[y][x].Tile[SouthFacing].Qsw;
Aggregate.c:		  Total->Veg.Tile[SouthFacing].Qlin       += VegMap[y][x].Tile[SouthFacing].Qlin;
Aggregate.c:          Total->Veg.Tile[SouthFacing].Qlw        += VegMap[y][x].Tile[SouthFacing].Qlw;
Aggregate.c:		  Total->Veg.Tile[SouthFacing].Qe         += VegMap[y][x].Tile[SouthFacing].Qe;
Aggregate.c:		  Total->Veg.Tile[SouthFacing].Qs         += VegMap[y][x].Tile[SouthFacing].Qs;
Aggregate.c:		  Total->Veg.Tile[SouthFacing].Qp         += VegMap[y][x].Tile[SouthFacing].Qp;
Aggregate.c:		  Total->Veg.Tile[SouthFacing].Swq        += VegMap[y][x].Tile[SouthFacing].Swq;
Aggregate.c:		  Total->Veg.Tile[SouthFacing].MeltEnergy += VegMap[y][x].Tile[SouthFacing].MeltEnergy;
Aggregate.c:		  Total->Veg.Tile[SouthFacing].LongIn[1]   += VegMap[y][x].Tile[SouthFacing].LongIn[1];
Aggregate.c:		  Total->Veg.Tile[SouthFacing].NetShort[1] += VegMap[y][x].Tile[SouthFacing].NetShort[1];
Aggregate.c:		  Total->Veg.Tile[SouthFacing].Albedo    += VegMap[y][x].Tile[SouthFacing].Albedo;
Aggregate.c:		  Total->Veg.Tile[SouthFacing].TSurf     += VegMap[y][x].Tile[SouthFacing].TSurf;
Aggregate.c:	Total->Veg.Tile[SouthFacing].Qsw /= TotNumTile;
Aggregate.c:	Total->Veg.Tile[SouthFacing].Qlin /= TotNumTile;
Aggregate.c:	Total->Veg.Tile[SouthFacing].Qlw /= TotNumTile;
Aggregate.c:	Total->Veg.Tile[SouthFacing].Qe /= TotNumTile;
Aggregate.c:	Total->Veg.Tile[SouthFacing].Qs /= TotNumTile;
Aggregate.c:	Total->Veg.Tile[SouthFacing].Qp /= TotNumTile;
Aggregate.c:	Total->Veg.Tile[SouthFacing].Swq /= TotNumTile;
Aggregate.c:	Total->Veg.Tile[SouthFacing].MeltEnergy /= TotNumTile;
Aggregate.c:	Total->Veg.Tile[SouthFacing].LongIn[1]   /= TotNumTile;
Aggregate.c:	Total->Veg.Tile[SouthFacing].NetShort[1] /= TotNumTile;
Aggregate.c:	Total->Veg.Tile[SouthFacing].Albedo /= TotNumTile;
Aggregate.c:	Total->Veg.Tile[SouthFacing].TSurf /= TotNumTile;
ExecDump.c:        Veg->Tile[SouthFacing].NetShort[1], Veg->Tile[SouthFacing].LongIn[1], /* Overstory True, 1 = Understory */
ExecDump.c:        Veg->Tile[SouthFacing].Swq,
ExecDump.c:      fprintf(OutFile->FilePtr, " %g %g %g %g", Veg->Tile[NorthFacing].Albedo, Veg->Tile[SouthFacing].Albedo,
InitModelState.c:			VegMap[y][x].Tile[SouthFacing].Swq = SnowMap[y][x].Swq;
InitTerrainMaps.c:  char SouthFacingFileName[BUFSIZE + 1];
InitTerrainMaps.c:  GetInitString("VEGETATION", "SOUTH FACING EDGE MAP FILE", "", SouthFacingFileName,
InitTerrainMaps.c:  if (!SouthFacingFileName)
InitTerrainMaps.c:  flag = Read2DMatrix(SouthFacingFileName, SFfrac, NumberType, Map, 0, VarName, 0);
MassEnergyBalance.c:    LocalVeg->Tile[SouthFacing].NVegLActual = VType->NVegLayers - 1;
MassEnergyBalance.c:    if (LocalVeg->Tile[SouthFacing].HasSnow == TRUE && VType->UnderStory == TRUE)
MassEnergyBalance.c:      --LocalVeg->Tile[SouthFacing].NVegLActual;
MassEnergyBalance.c:    TileShortRadiation(VType, &(LocalVeg->Tile[SouthFacing]), Options,
MassEnergyBalance.c:    TileLongRadiation(VType, &(LocalVeg->Tile[SouthFacing]), Options,
ResetAggregate.c:	  Total->Veg.Tile[SouthFacing].LongIn[1] = 0;
ResetAggregate.c:	  Total->Veg.Tile[SouthFacing].NetShort[1] = 0;
TileEnergyBalance.c:* DESCRIPTION:  Calculate snow balance for NorthFacing/SouthFacing/Exposed/Forest
TileEnergyBalance.c:  if ((*Tile)[SouthFacing].UnderStory == FALSE) {
TileEnergyBalance.c:  (*Tile)[SouthFacing].U[1] =
TileEnergyBalance.c:  (*Tile)[SouthFacing].Ra[1] =
TileEnergyBalance.c:  (*Tile)[SouthFacing].USnow = log((2.+Z0_SNOW)/Z0_SNOW) / log(Zref/Z0_SNOW);
TileEnergyBalance.c:  (*Tile)[SouthFacing].RaSnow = log((2.+Z0_SNOW)/Z0_SNOW) * log(Zref/Z0_SNOW)/K2;
TileEnergyBalance.c:  if ((*Tile)[SouthFacing].UnderStory == TRUE) {
TileEnergyBalance.c:    (*Tile)[SouthFacing].Tcanopy = LocalMet->Tair;
TileEnergyBalance.c:    (*Tile)[SouthFacing].CanopyVaporMassFlux = 0.0;
TileEnergyBalance.c:    (*Tile)[SouthFacing].TempIntStorage = 0.0;
TileEnergyBalance.c:    CanopyGapInterceptionStorage((*Tile)[SouthFacing].NVegLActual, VType->MaxInt,
TileEnergyBalance.c:      VType->Fract, (*Tile)[SouthFacing].IntRain, &((*Tile)[SouthFacing].RainFall));
TileEnergyBalance.c:  /********************* calculate SouthFacing snow melt *********************/
TileEnergyBalance.c:  /* SouthFacing */
TileEnergyBalance.c:  if ((*Tile)[SouthFacing].HasSnow || (*Tile)[SouthFacing].SnowFall > 0.0) {
TileEnergyBalance.c:    SnowLongIn = (*Tile)[SouthFacing].LongIn[1];
TileEnergyBalance.c:    SnowNetShort = (*Tile)[SouthFacing].NetShort[1];
TileEnergyBalance.c:    SnowWind = (*Tile)[SouthFacing].USnow * LocalMet->Wind;
TileEnergyBalance.c:    SnowRa = (*Tile)[SouthFacing].RaSnow / LocalMet->Wind;
TileEnergyBalance.c:    OldTSurf = (*Tile)[SouthFacing].TSurf;
TileEnergyBalance.c:    (*Tile)[SouthFacing].SnowPackOutflow =
TileEnergyBalance.c:        LocalMet->Press, (*Tile)[SouthFacing].RainFall, (*Tile)[SouthFacing].SnowFall,
TileEnergyBalance.c:        &((*Tile)[SouthFacing].PackWater), &((*Tile)[SouthFacing].SurfWater),
TileEnergyBalance.c:        &((*Tile)[SouthFacing].Swq), &((*Tile)[SouthFacing].VaporMassFlux),
TileEnergyBalance.c:        &((*Tile)[SouthFacing].TPack), &((*Tile)[SouthFacing].TSurf), &((*Tile)[SouthFacing].MeltEnergy));
TileEnergyBalance.c:    Tmean = 0.5 * (OldTSurf + (*Tile)[SouthFacing].TSurf);
TileEnergyBalance.c:    (*Tile)[SouthFacing].Qsw = SnowNetShort;
TileEnergyBalance.c:	(*Tile)[SouthFacing].Qlin = SnowLongIn;
TileEnergyBalance.c:    (*Tile)[SouthFacing].Qlw = SnowLongIn - STEFAN * (Tmp * Tmp * Tmp * Tmp);
TileEnergyBalance.c:    (*Tile)[SouthFacing].Qs = LocalMet->AirDens * CP * (LocalMet->Tair - Tmean) / SnowRa;
TileEnergyBalance.c:      (*Tile)[SouthFacing].Qe = LocalMet->Lv * (*Tile)[SouthFacing].VaporMassFlux * WATER_DENSITY;
TileEnergyBalance.c:      (*Tile)[SouthFacing].Qe = Ls * (*Tile)[SouthFacing].VaporMassFlux * WATER_DENSITY;
TileEnergyBalance.c:    (*Tile)[SouthFacing].Qe /= Dt;
TileEnergyBalance.c:    (*Tile)[SouthFacing].Qp = (CH_WATER * LocalMet->Tair * (*Tile)[SouthFacing].RainFall) / Dt;
TileEnergyBalance.c:    (*Tile)[SouthFacing].RainFall = 0.0;
TileEnergyBalance.c:    (*Tile)[SouthFacing].MoistureFlux -= (*Tile)[SouthFacing].VaporMassFlux;
TileEnergyBalance.c:    Tsurf = Tile[SouthFacing]->TSurf;
TileEnergyBalance.c:    TileLongRadiation(VType, &(LocalVeg->Tile[SouthFacing]), Options,
TileEnergyBalance.c:    (*Tile)[SouthFacing].SnowPackOutflow = 0.0;
TileEnergyBalance.c:    (*Tile)[SouthFacing].VaporMassFlux = 0.0;
TileEnergyBalance.c:	(*Tile)[SouthFacing].Qs = 0.;
TileEnergyBalance.c:	(*Tile)[SouthFacing].Qe = 0.;
TileEnergyBalance.c:	(*Tile)[SouthFacing].Qp = 0.;
TileEnergyBalance.c:	(*Tile)[SouthFacing].Qsw = 0;
TileEnergyBalance.c:	(*Tile)[SouthFacing].Qlin = 0;
TileEnergyBalance.c:	(*Tile)[SouthFacing].Qlw = 0; /* not used in calculation */
TileEnergyBalance.c:	(*Tile)[SouthFacing].MeltEnergy = 0;
TileEnergyBalance.c:  if ((*Tile)[SouthFacing].Swq > 0.0)
TileEnergyBalance.c:    (*Tile)[SouthFacing].HasSnow = TRUE;
TileEnergyBalance.c:    (*Tile)[SouthFacing].HasSnow = FALSE;
TileEnergyBalance.c:  /********************** for SouthFacing **********************/
TileEnergyBalance.c:  if ((*Tile)[SouthFacing].HasSnow != TRUE && VType->UnderStory == TRUE) {
TileEnergyBalance.c:    Rp = VISFRACT * (*Tile)[SouthFacing].NetShort[1];
TileEnergyBalance.c:      (*Tile)[SouthFacing].NetShort[1] +
TileEnergyBalance.c:      (*Tile)[SouthFacing].LongIn[1] - (*Tile)[SouthFacing].LongOut[1];
TileEnergyBalance.c:      Rp, VType, SType, (*Tile)[SouthFacing].MoistureFlux, (*Tile)[SouthFacing].Moist,
TileEnergyBalance.c:      LocalSoil->Temp, &((*Tile)[SouthFacing].IntRain[0]),
TileEnergyBalance.c:      (*Tile)[SouthFacing].EPot, (*Tile)[SouthFacing].EInt, (*Tile)[SouthFacing].ESoil,
TileEnergyBalance.c:      (*Tile)[SouthFacing].EAct, &((*Tile)[SouthFacing].ETot), LocalNetwork->Adjust, LowerRa);
TileEnergyBalance.c:    (*Tile)[SouthFacing].MoistureFlux += (*Tile)[SouthFacing].EAct[1] + (*Tile)[SouthFacing].EInt[1];
TileEnergyBalance.c:    (*Tile)[SouthFacing].NetRadiation[1] = NetRadiation;
TileEnergyBalance.c:    (*Tile)[SouthFacing].NetRadiation[0] = 0.;
TileEnergyBalance.c:    (*Tile)[SouthFacing].EAct[1] = 0.;
TileEnergyBalance.c:    (*Tile)[SouthFacing].EInt[1] = 0.;
TileEnergyBalance.c:    (*Tile)[SouthFacing].NetRadiation[0] = 0.;
TileEnergyBalance.c:    (*Tile)[SouthFacing].NetRadiation[1] = 0.;
TileEnergyBalance.c:  if ((*Tile)[SouthFacing].HasSnow != TRUE && VType->UnderStory != TRUE) {
TileEnergyBalance.c:      (*Tile)[SouthFacing].NetShort[1] + (*Tile)[SouthFacing].LongIn[1] - (*Tile)[SouthFacing].LongOut[1];
TileEnergyBalance.c:    (*Tile)[SouthFacing].NetRadiation[1] = NetRadiation;
TileEnergyBalance.c:    (*Tile)[SouthFacing].NetRadiation[0] = 0.;
TileEnergyBalance.c:    (*Tile)[SouthFacing].EvapSoil =
TileEnergyBalance.c:        NetRadiation, UpperRa, (*Tile)[SouthFacing].MoistureFlux, SType->Porosity[0],
TileEnergyBalance.c:        VType->RootDepth[0], &((*Tile)[SouthFacing].Moist[0]),
TileEnergyBalance.c:    (*Tile)[SouthFacing].EvapSoil = 0.0;
TileEnergyBalance.c:  (*Tile)[SouthFacing].MoistureFlux += (*Tile)[SouthFacing].EvapSoil;
TileEnergyBalance.c:  (*Tile)[SouthFacing].ETot += (*Tile)[SouthFacing].EvapSoil;
TileEnergyBalance.c:    (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].RainFall + LocalVeg->FORfrac*(*Tile)[ForestTile].RainFall + LocalVeg->NFfrac*(*Tile)[NorthFacing].RainFall + LocalVeg->SFfrac*(*Tile)[SouthFacing].RainFall;
TileEnergyBalance.c:    (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].SnowFall + LocalVeg->FORfrac*(*Tile)[ForestTile].SnowFall + LocalVeg->NFfrac*(*Tile)[NorthFacing].SnowFall + LocalVeg->SFfrac*(*Tile)[SouthFacing].SnowFall;
TileEnergyBalance.c:    (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].Precip + LocalVeg->FORfrac*(*Tile)[ForestTile].Precip + LocalVeg->NFfrac*(*Tile)[NorthFacing].Precip + LocalVeg->SFfrac*(*Tile)[SouthFacing].Precip;
TileEnergyBalance.c:    (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].SnowPackOutflow + LocalVeg->FORfrac*(*Tile)[ForestTile].SnowPackOutflow + LocalVeg->NFfrac*(*Tile)[NorthFacing].SnowPackOutflow + LocalVeg->SFfrac*(*Tile)[SouthFacing].SnowPackOutflow;
TileEnergyBalance.c:    (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].CanopyVaporMassFlux + LocalVeg->FORfrac*(*Tile)[ForestTile].CanopyVaporMassFlux + LocalVeg->NFfrac*(*Tile)[NorthFacing].CanopyVaporMassFlux + LocalVeg->SFfrac*(*Tile)[SouthFacing].CanopyVaporMassFlux;
TileEnergyBalance.c:    (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].VaporMassFlux + LocalVeg->FORfrac*(*Tile)[ForestTile].VaporMassFlux + LocalVeg->NFfrac*(*Tile)[NorthFacing].VaporMassFlux + LocalVeg->SFfrac*(*Tile)[SouthFacing].VaporMassFlux;
TileEnergyBalance.c:      (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].NetShort[i] + LocalVeg->FORfrac*(*Tile)[ForestTile].NetShort[i] +  LocalVeg->NFfrac*(*Tile)[NorthFacing].NetShort[i] + LocalVeg->SFfrac*(*Tile)[SouthFacing].NetShort[i];
TileEnergyBalance.c:      (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].LongIn[i] + LocalVeg->FORfrac*(*Tile)[ForestTile].LongIn[i] + LocalVeg->NFfrac*(*Tile)[NorthFacing].LongIn[i] + LocalVeg->SFfrac*(*Tile)[SouthFacing].LongIn[i];
TileEnergyBalance.c:      (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].LongOut[i] + LocalVeg->FORfrac*(*Tile)[ForestTile].LongOut[i] + LocalVeg->NFfrac*(*Tile)[NorthFacing].LongOut[i] + LocalVeg->SFfrac*(*Tile)[SouthFacing].LongOut[i];
TileEnergyBalance.c:    (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].Swq + LocalVeg->FORfrac*(*Tile)[ForestTile].Swq + LocalVeg->NFfrac*(*Tile)[NorthFacing].Swq + LocalVeg->SFfrac*(*Tile)[SouthFacing].Swq;
TileEnergyBalance.c:    (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].TPack + LocalVeg->FORfrac*(*Tile)[ForestTile].TPack + LocalVeg->NFfrac*(*Tile)[NorthFacing].TPack + LocalVeg->SFfrac*(*Tile)[SouthFacing].TPack;
TileEnergyBalance.c:    (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].PackWater + LocalVeg->FORfrac*(*Tile)[ForestTile].PackWater + LocalVeg->NFfrac*(*Tile)[NorthFacing].PackWater + LocalVeg->SFfrac*(*Tile)[SouthFacing].PackWater;
TileEnergyBalance.c:    (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].SurfWater + LocalVeg->FORfrac*(*Tile)[ForestTile].SurfWater + LocalVeg->NFfrac*(*Tile)[NorthFacing].SurfWater + LocalVeg->SFfrac*(*Tile)[SouthFacing].SurfWater;
TileEnergyBalance.c:      LocalVeg->FORfrac*(*Tile)[ForestTile].Moist[j] + LocalVeg->NFfrac*(*Tile)[NorthFacing].Moist[j] + LocalVeg->SFfrac*(*Tile)[SouthFacing].Moist[j];
TileEnergyBalance.c:    (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].MoistureFlux + LocalVeg->FORfrac*(*Tile)[ForestTile].MoistureFlux + LocalVeg->NFfrac*(*Tile)[NorthFacing].MoistureFlux + LocalVeg->SFfrac*(*Tile)[SouthFacing].MoistureFlux;
TileEnergyBalance.c:    (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].MeltEnergy + LocalVeg->FORfrac*(*Tile)[ForestTile].MeltEnergy + LocalVeg->NFfrac*(*Tile)[NorthFacing].MeltEnergy + LocalVeg->SFfrac*(*Tile)[SouthFacing].MeltEnergy;
TileEnergyBalance.c:      (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].IntRain[i] + LocalVeg->FORfrac*(*Tile)[ForestTile].IntRain[i] + LocalVeg->NFfrac*(*Tile)[NorthFacing].IntRain[i] + LocalVeg->SFfrac*(*Tile)[SouthFacing].IntRain[i];
TileEnergyBalance.c:      (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].IntSnow[i] + LocalVeg->FORfrac*(*Tile)[ForestTile].IntSnow[i] + LocalVeg->NFfrac*(*Tile)[NorthFacing].IntSnow[i] + LocalVeg->SFfrac*(*Tile)[SouthFacing].IntSnow[i];
TileEnergyBalance.c:      (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].EPot[i] + LocalVeg->FORfrac*(*Tile)[ForestTile].EPot[i] + LocalVeg->NFfrac*(*Tile)[NorthFacing].EPot[i] + LocalVeg->SFfrac*(*Tile)[SouthFacing].EPot[i];
TileEnergyBalance.c:      (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].EAct[i] + LocalVeg->FORfrac*(*Tile)[ForestTile].EAct[i] + LocalVeg->NFfrac*(*Tile)[NorthFacing].EAct[i] + LocalVeg->SFfrac*(*Tile)[SouthFacing].EAct[i];
TileEnergyBalance.c:      (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].EInt[i] + LocalVeg->FORfrac*(*Tile)[ForestTile].EInt[i] + LocalVeg->NFfrac*(*Tile)[NorthFacing].EInt[i] + LocalVeg->SFfrac*(*Tile)[SouthFacing].EInt[i];
TileEnergyBalance.c:        (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].ESoil[i][j] + LocalVeg->FORfrac*(*Tile)[ForestTile].ESoil[i][j] + LocalVeg->NFfrac*(*Tile)[NorthFacing].ESoil[i][j] + LocalVeg->SFfrac*(*Tile)[SouthFacing].ESoil[i][j];
TileEnergyBalance.c:    (1 - (LocalVeg->FORfrac + LocalVeg->NFfrac + LocalVeg->SFfrac))*(*Tile)[Exposed].ETot + LocalVeg->FORfrac*(*Tile)[ForestTile].ETot + LocalVeg->NFfrac*(*Tile)[NorthFacing].ETot + LocalVeg->SFfrac*(*Tile)[SouthFacing].ETot;
TileRadiation.c:     ==== This happens in SouthFacing and NorthFacing flags         ====*/
TileRadiation.c:  (*Tile)[NorthFacing].SouthFacingInt = FALSE;
TileRadiation.c:  (*Tile)[SouthFacing].OverStory      = VType->OverStory;
TileRadiation.c:  (*Tile)[SouthFacing].UnderStory     = VType->UnderStory;
TileRadiation.c:  (*Tile)[SouthFacing].NorthFacingInt = FALSE;
TileRadiation.c:  (*Tile)[SouthFacing].SouthFacingInt = TRUE;
TileRadiation.c:  (*Tile)[SouthFacing].ExposedInt     = FALSE;
TileRadiation.c:  (*Tile)[SouthFacing].ForestInt      = FALSE;
TileRadiation.c:  (*Tile)[Exposed].SouthFacingInt     = FALSE;
TileRadiation.c:  (*Tile)[ForestTile].SouthFacingInt  = FALSE;
TileRadiation.c:  if (Tile->SouthFacingInt == TRUE) {
TileRadiation.c:  if (Tile->SouthFacingInt == TRUE) {
